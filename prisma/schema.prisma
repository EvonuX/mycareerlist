generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy", "referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  EMPLOYER
  ADMIN
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?     @db.Text
  preferences   String?     @default("") @db.VarChar(255)
  role          Role        @default(USER)
  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  payments      Payment[]
  reviews       Review[]
  savedJobs     Job[]
  interviews    Interview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Company {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String?     @unique @db.VarChar(255)
  description String?     @db.Text
  website     String?
  logo        String?     @db.Text
  region      String      @db.VarChar(50)
  city        String?
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  jobs        Job[]
  reviews     Review[]
  interviews  Interview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Job {
  id          String  @id @default(cuid())
  slug        String? @unique @db.VarChar(255)
  title       String  @db.VarChar(255)
  description String? @db.Text
  type        String  @db.VarChar(50)
  category    String  @db.VarChar(50)
  location    String  @db.VarChar(50)
  city        String  @db.VarChar(50)
  applyLink   String  @db.Text
  salaryRange String?
  draft       Boolean @default(true)
  featured    Boolean @default(false)
  expired     Boolean @default(false)

  userId    String
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  savedBy   User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

model Review {
  id       String  @id @default(cuid())
  title    String  @db.Text
  content  String  @db.Text
  pros     String? @db.Text
  cons     String? @db.Text
  rating   Int
  status   String
  verified Boolean @default(false)

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Interview {
  id         String @id @default(cuid())
  title      String @db.Text
  position   String @db.VarChar(255)
  year       String @db.VarChar(5)
  hr         String @db.Text
  technical  String @db.Text
  duration   Int
  difficulty Int
  offer      String
  rating     Int    @default(0)

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("interviews")
}

model Payment {
  id      String @id @default(cuid())
  orderID String
  amount  String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}
